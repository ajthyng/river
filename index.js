const mongo = require('mongodb')
const { join } = require('path')
const { Observable, defer, from } = require('rxjs')
const { tap, map, mergeAll, pluck, delay } = require('rxjs/operators/index.js')

const uri = 'mongodb://localhost:27017/'

async function getUsers ({ client, delay }) {
  const db = client.db('river')
  const users = await db.collection('users').find().sort({ id: 1 }).batchSize(5)

  return new Observable(async (subscriber) => {
    while (await users.hasNext()) {
      subscriber.next(await users.next())
    }
    subscriber.complete()
  })
}

async function applyFixtures (path, client) {
  const fakeUsers = require(join(__dirname, path)).map(user => ({
    updateOne: {
      filter: { _id: user._id },
      update: { $set: { ...user } },
      upsert: true
    }
  }))

  const river = client.db('river')
  return await river.collection('users').bulkWrite(fakeUsers)
}

const waitTimes = [
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  71, 382, 11, 568, 657, 572, 360, 629, 830, 625, 204,
  732, 690, 797, 167, 877, 737, 815, 728, 85, 131, 356,
  672, 181, 279, 985, 65, 937, 120, 861, 317, 403, 223,
  165, 389, 13, 669, 759, 464, 41, 479, 71, 932, 755,
  895, 361, 687, 243, 52, 65, 15, 563, 58, 738, 554,
  981, 936, 746, 762, 917, 251, 606, 607, 413, 1000, 360,
  266, 432, 683, 252, 51, 33, 56, 16, 257, 677, 554,
  652, 335, 29, 662, 148, 466, 46, 4, 588, 134, 462,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724,
  593, 666, 748, 55, 244, 988, 172, 453, 480, 609, 724
]

const copyUser = async (user) => {
  await new Promise(resolve => setTimeout(resolve, waitTimes[user.id - 1]))
  return { ...user }
}

async function concurrentPromises ({ iterable, throttleRate, concurrency }) {
  const source$ = from(iterable)
  const river = source$.pipe(
    map(user => defer(async () => copyUser(user))),
    mergeAll(concurrency),
    pluck('id'),
    tap(val => console.log(val))
  )

  const start = new Date().valueOf()

  river.subscribe({
    complete: () => {
      console.log('total length:', waitTimes.length)
      console.log('done in', new Date().valueOf() - start, 'ms')
    }
  })
}

async function main () {
  const client = new mongo.MongoClient(uri, {
    useUnifiedTopology: true
  })
  try {
    await client.connect()
    await applyFixtures('fixtures.json', client)
    const users = await getUsers({
      client
    })

    await concurrentPromises({
      iterable: users,
      throttleRate: 10000,
      concurrency: 50
    })
  } catch (err) {
    console.log(err)
  }
}

main()
